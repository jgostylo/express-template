#!/usr/bin/env node

/**
 * Module dependencies.
 */

var path = require("path");
var globalsHandler = require(path.normalize(__dirname + "/../config/globals.js"));
var globalInit = require(path.normalize(__dirname + "/../config/globalInit.js"));
var initServices = require(path.normalize(__dirname + "/../setup/initServices.js"));

console.log("STARTING UP")
console.log("INITIALIZING GLOBALS")
globalInit(function(initializedGlobals){
    if(!initializedGlobals){
        initializedGlobals = {};
    }
    if(typeof initializedGlobals !== "object" || initializedGlobals instanceof Array){
        throw "Initialized Globals must be a plain object."
    }

    for(var key in initializedGlobals){
        console.log(key)
    }

    globalsHandler.set(initializedGlobals);

    initServices();

    var globals = globalsHandler.get();

    var app = require('../app');
    var debug = require('debug')('express-template:server');
    var http = require('http');
    var startup = require(path.normalize(__dirname + "/../config/startup")).bind(globals);

    /**
    * Get port from environment and store in Express.
    */

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
    * Create HTTP server.
    */

    var server = http.createServer(app);

    /**
    * Listen on provided port, on all network interfaces.
    */

    startup(function(err){
        if(err){
          throw err;
        }
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening.bind({}, server));
    })
})

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
}

function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
